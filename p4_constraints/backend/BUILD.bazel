load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

package(
    default_visibility = ["//visibility:public"],
    licenses = ["notice"],  # Apache 2.0
)

cc_library(
    name = "interpreter",
    srcs = ["interpreter.cc"],
    hdrs = ["interpreter.h"],
    # GMP is a system dependency for now.
    # Building it with Bazel would be better, but it's not obvious how to do it.
    linkopts = [
        "-lgmp",
        "-lgmpxx",
    ],
    deps = [
        ":constraint_info",
        "//p4_constraints:ast",
        "//p4_constraints:ast_cc_proto",
        "//p4_constraints:quote",
        "//util:ret_check",
        "//util:status",
        "@com_github_p4lang_p4runtime//:p4runtime_cc_proto",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
    ],
)

cc_test(
    name = "interpreter_test",
    size = "small",
    srcs = ["interpreter_test.cc"],
    deps = [
        ":constraint_info",
        ":interpreter",
        "//p4_constraints:ast_cc_proto",
        "//util:parse_text_proto",
        "//util:status_matchers",
        "@com_github_p4lang_p4runtime//:p4runtime_cc_proto",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/strings:str_format",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "constraint_info",
    srcs = [
        "constraint_info.cc",
        "type_checker.cc",
    ],
    hdrs = [
        "constraint_info.h",
        "type_checker.h",
    ],
    deps = [
        "//p4_constraints:ast",
        "//p4_constraints:ast_cc_proto",
        "//p4_constraints:quote",
        "//p4_constraints/frontend:lexer",
        "//p4_constraints/frontend:parser",
        "//util:ret_check",
        "//util:status",
        "@com_github_p4lang_p4runtime//:p4info_cc_proto",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_googlesource_code_re2//:re2",
    ],
)

cc_test(
    name = "type_checker_test",
    size = "small",
    srcs = ["type_checker_test.cc"],
    deps = [
        ":constraint_info",
        "//p4_constraints:ast",
        "//p4_constraints:ast_cc_proto",
        "//util:parse_text_proto",
        "//util:status_matchers",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_googletest//:gtest_main",
    ],
)
